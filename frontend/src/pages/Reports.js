// src/pages/Reports.js
import React, { useEffect, useState } from "react";
import { fetchReports, createReport, updateReport, deleteReport } from "../services/api";
import { Container, Table, Button, Form, Modal, Alert } from "react-bootstrap";

const Reports = () => {
    const [reports, setReports] = useState([]);
    const [show, setShow] = useState(false);
    const [formData, setFormData] = useState({ type: "project_summary", generated_by: "" });
    const [editId, setEditId] = useState(null);
    const [error, setError] = useState("");

    useEffect(() => {
        const loadReports = async () => {
            const data = await fetchReports();
            console.log("📊 Reports Data:", data); // ✅ Log reports in frontend
            setReports(data);
        };
        loadReports();
    }, []);

    const loadReports = async () => {
        try {
            const data = await fetchReports();
            console.log("📊 Reports Data:", data); // ✅ Debugging output
            setReports(data);
        } catch (error) {
            console.error("❌ Error fetching reports:", error);
        }
    };
    

    const handleShow = (report = null) => {
        setError(""); // Clear errors on opening modal
        if (report) {
            setEditId(report.id);
            setFormData({ type: report.type, generated_by: report.generated_by });
        } else {
            setEditId(null);
            setFormData({ type: "project_summary", generated_by: "" });
        }
        setShow(true);
    };

    const handleClose = () => {
        setShow(false);
        setEditId(null);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            if (editId) {
                await updateReport(editId, formData);
            } else {
                await createReport(formData);
            }
            handleClose();
            loadReports();
        } catch (error) {
            setError("Failed to save report. Check your inputs.");
        }
    };

    const handleDelete = async (id) => {
        if (window.confirm("Are you sure you want to delete this report?")) {
            await deleteReport(id);
            loadReports();
        }
    };

    return (
        <Container className="mt-4">
            <h1>Reports Management</h1>
            <Button variant="primary" onClick={() => handleShow()}>Add Report</Button>
            <Table striped bordered hover className="mt-3">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Type</th>
                        <th>Generated By</th>
                        <th>Generated At</th>
                        <th>Created At</th>
                        <th>Updated At</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {reports.map((report) => (
                        <tr key={report.id}>
                            <td>{report.id}</td>
                            <td>{report.type}</td>
                            <td>{report.generated_by}</td>
                            <td>{new Date(report.generated_at).toLocaleString()}</td>
                            <td>{new Date(report.createdAt).toLocaleString()}</td>
                            <td>{new Date(report.updatedAt).toLocaleString()}</td>
                            <td>
                                <Button variant="warning" className="me-2" onClick={() => handleShow(report)}>Edit</Button>
                                <Button variant="danger" onClick={() => handleDelete(report.id)}>Delete</Button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </Table>

            {/* Modal for Adding/Editing Report */}
            <Modal show={show} onHide={handleClose}>
                <Modal.Header closeButton>
                    <Modal.Title>{editId ? "Edit Report" : "Add Report"}</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    {error && <Alert variant="danger">{error}</Alert>}
                    <Form onSubmit={handleSubmit}>
                        <Form.Group className="mb-3">
                            <Form.Label>Type</Form.Label>
                            <Form.Select value={formData.type} onChange={(e) => setFormData({ ...formData, type: e.target.value })}>
                                <option value="project_summary">Project Summary</option>
                                <option value="resource_efficiency">Resource Efficiency</option>
                                <option value="budget_report">Budget Report</option>
                            </Form.Select>
                        </Form.Group>
                        <Form.Group className="mb-3">
                            <Form.Label>Generated By (User ID)</Form.Label>
                            <Form.Control type="number" value={formData.generated_by} onChange={(e) => setFormData({ ...formData, generated_by: e.target.value })} required />
                        </Form.Group>
                        <Button variant="primary" type="submit">{editId ? "Update" : "Create"}</Button>
                    </Form>
                </Modal.Body>
            </Modal>
        </Container>
    );
};

export default Reports;
